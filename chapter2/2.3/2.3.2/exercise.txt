Exercise 2.3.2

root -> expr

expr -> expr fact + expr |
	expr fact - expr | 
	fact 

fact -> fact digit * fact |
	fact digit / fact |
	fact digit |
	expr |
	e

digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

Translation scheme:

root -> expr { root.value = expr.infix; print(root.value) }

expr -> expr fact + expr { expr.infix = expr.infix || '+' || fact.infix || expr.infix }
expr -> expr fact - expr { expr.infix = expr.infix || '-' || fact.infix || expr.infix }
expr -> fact { expr.infix = fact.infix }

fact -> fact digit * fact { fact.infix = fact.infix || '*' || digit.value || fact.infix }
fact ->	fact digit / fact { fact.infix = fact.infix || '/' || digit.value || fact.infix }
fact ->	fact digit { expr.infix = fact.infix || digit.value }
fact -> expr { fact.infix = expr.infix }
fact -> e { }

digit -> 0 { digit.value = 0 }
digit -> 1 { digit.value = 1 }
digit -> 2 { digit.value = 2 }
digit -> 3 { digit.value = 3 }
digit -> 4 { digit.value = 4 }
digit -> 5 { digit.value = 5 }
digit -> 6 { digit.value = 6 }
digit -> 7 { digit.value = 7 }
digit -> 8 { digit.value = 8 }

